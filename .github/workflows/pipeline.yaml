name: CI/CD Pipeline for Car CRUD App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TF_VERSION: '1.5.0'

jobs:
  # Phase 3: Build
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.12.3'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Build the application (if necessary)
        run: |
          echo "No specific build process defined."

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: car-crud-app-dist
          path: .

  # Phase 4: Test
  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: car-crud-app-dist
          path: .

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.12.3'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: |
          pytest -s tests/test_unitary.py

      - name: Install MongoDB
        run: |
          sudo apt-get update
          sudo apt-get install -y mongodb
          sudo systemctl enable mongod
          sudo systemctl start mongod

      - name: Verify MongoDB is running
        run: |
          sudo systemctl status mongod

      - name: Run Integration Tests
        run: |
          pytest -v tests/test_integration.py

      - name: Run Functionality Tests
        run: 
          python -m unittest tests.test_functionality

      - name: Start the application for performance tests
        run: |
          python app.py &
          echo $! > app_pid.txt  # Guarda el PID del proceso para detenerlo más tarde

      - name: Wait for the application to be ready
        run: |
          for i in {1..30}; do
            curl -s http://localhost:5000 && break
            sleep 1
          done

      - name: Run Performance Tests
        run: |
          locust -f tests/test_performance.py --host=http://localhost:5000

      - name: Stop the application
        if: always()
        run: |
          kill $(cat app_pid.txt) || true

      - name: Run Quality Tests
        run: |
          pylint app.py

      - name: Install Trivy for Security Tests
        run: |
          sudo apt-get install -y wget && \
          wget https://github.com/aquasecurity/trivy/releases/download/v0.46.0/trivy_0.46.0_Linux-64bit.deb && \
          sudo dpkg -i trivy_0.46.0_Linux-64bit.deb

      - name: Run Security Tests
        run: |
          ./tests/test_security.sh

  # Phase 5: Infrastructure Setup (Terraform)
  infrastructure:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      website_bucket: ${{ steps.terraform-outputs.outputs.website_bucket }}
      artifacts_bucket: ${{ steps.terraform-outputs.outputs.artifacts_bucket }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ./iac
        run: terraform init

      - name: Terraform Plan
        working-directory: ./iac
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./iac
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        working-directory: ./iac
        id: terraform-outputs
        run: |
          terraform output -raw website_bucket_name > website_bucket.txt
          terraform output -raw artifacts_bucket_name > artifacts_bucket.txt
          
          # Verificación de variables
          echo "Website bucket name: $(cat website_bucket.txt)"
          echo "Artifacts bucket name: $(cat artifacts_bucket.txt)"
          
          # Leer los archivos y establecer los outputs
          echo "website_bucket=$(cat website_bucket.txt)" >> "$GITHUB_OUTPUT"
          echo "artifacts_bucket=$(cat artifacts_bucket.txt)" >> "$GITHUB_OUTPUT"
          
          # Eliminar los archivos temporales
          rm website_bucket.txt artifacts_bucket.txt
          
          # Verificación de outputs
          echo "Website bucket: ${{ steps.terraform-outputs.outputs.website_bucket }}"
          echo "Artifacts bucket: ${{ steps.terraform-outputs.outputs.artifacts_bucket }}"
          
          cat $GITHUB_OUTPUT

  # Phase 6: Deploy to Cloud
  deploy:
    needs: infrastructure
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: car-crud-app-dist
          path: ./dist

      - name: Deploy Website to S3
        env:
          WEBSITE_BUCKET: ${{ needs.infrastructure.outputs.website_bucket }}
        shell: bash
        run: |
          # Verificación de los outputs
          echo "Website bucket: ${{ steps.terraform-outputs.outputs.website_bucket }}"
          
          # Verificación de las variables de entorno
          echo "Website bucket: $WEBSITE_BUCKET"
         
          # Desplegar sitio web
          aws s3 sync dist/ "s3://$WEBSITE_BUCKET/"

      - name: Copy zip to S3
        env:
          ARTIFACTS_BUCKET: ${{ needs.infrastructure.outputs.artifacts_bucket }}
        shell: bash
        run: |
          # Verificación de los outputs
          echo "Artifacts bucket: ${{ steps.terraform-outputs.outputs.artifacts_bucket }}"
          
          # Verificación de las variables de entorno
          echo "Artifacts bucket: $ARTIFACTS_BUCKET"
          
          # Crear archivo ZIP con el contenido de dist
          cd dist && zip -r ../website-dist.zip .
          cd ..
          ls -la website-dist.zip
          
          # Copiar artefacto
          aws s3 cp website-dist.zip "s3://${ARTIFACTS_BUCKET}/website-dist.zip"

  # Phase 7: Release
  release:
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create Git Tag for Release
        run: |
          TAG="release-$(date +'%Y%m%d-%H%M%S')"
          git tag $TAG
          git push origin $TAGE