name: CI/CD Pipeline for Car CRUD App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TF_VERSION: '1.5.0'

jobs:
  # Phase 3: Build
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.12.3'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Build the application (if necessary)
        run: |
          echo "No specific build process defined."

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: car-crud-app-dist
          path: .

  # Phase 4: Test
  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Placeholder test step
      run: echo "Running tests..."

    # - uses: actions/checkout@v3

    # - name: Download build artifact
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: car-crud-app-dist
    #     path: .

    # - name: Set up Python
    #   uses: actions/setup-python@v3
    #   with:
    #     python-version: '3.12.3'

    # - name: Install dependencies
    #   run: |
    #     python -m venv venv
    #     source venv/bin/activate
    #     pip install -r requirements.txt

    # - name: Run Unit Tests
    #   run: |
    #     pytest -s tests/test_unitary.py

    # - name: Install MongoDB
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y gnupg curl
    #     sudo mkdir -p /etc/apt/sources.list.d
    #     curl -fsSL https://www.mongodb.org/static/pgp/server-6.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg --dearmor
    #     echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | \
    #       sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
    #     sudo apt-get update
    #     sudo apt-get install -y mongodb-org

    # - name: Start MongoDB service
    #   run: |
    #     sudo systemctl enable mongod
    #     sudo systemctl start mongod
    #     sudo systemctl status mongod

    # - name: Run Integration Tests
    #   run: |
    #     pytest -v tests/test_integration.py

    # - name: Run Functionality Tests
    #   run: 
    #     python -m unittest tests.test_functionality

    # - name: Start the application for performance tests
    #   run: |
    #     python app.py &
    #     echo $! > app_pid.txt

    # - name: Wait for the application to be ready
    #   run: |
    #     for i in {1..30}; do
    #       curl -s http://localhost:5000 && break
    #       sleep 1
    #     done

    # - name: Run Performance Tests
    #   run: |
    #     locust -f tests/test_performance.py \
    #       --headless \
    #       --users 100 \
    #       --spawn-rate 10 \
    #       --run-time 15s \
    #       --host=http://localhost:5000

    # - name: Stop the application
    #   if: always()
    #   run: |
    #     kill $(cat app_pid.txt) || true

    # - name: Run Quality Tests
    #   run: |
    #     python tests/test_quality.py

    # - name: Install Trivy for Security Tests
    #   run: |
    #     sudo apt-get install -y wget && \
    #     wget https://github.com/aquasecurity/trivy/releases/download/v0.46.0/trivy_0.46.0_Linux-64bit.deb && \
    #     sudo dpkg -i trivy_0.46.0_Linux-64bit.deb

    # - name: Run Security Tests
    #   run: |
    #     ./tests/test_security.sh
    #   continue-on-error: true

  # Phase 5: Infrastructure Setup (Terraform)
  infrastructure:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      instance_public_ip: ${{ steps.get-ip.outputs.instance_public_ip }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: Create S3 Bucket for Terraform State and DynamoDB Table for Locking
        run: |
          aws s3 mb s3://mi-bucket-terraform-state --region ${{ env.AWS_REGION }}
          aws dynamodb create-table \
            --table-name tabla-de-lock-terraform \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
            --region ${{ env.AWS_REGION }}

      - name: Terraform Init (Configure Backend)
        working-directory: ./iac
        run: terraform init -reconfigure

      - name: Terraform Plan
        working-directory: ./iac
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./iac
        run: terraform apply -auto-approve tfplan

      - name: Get Instance Public IP
        working-directory: ./iac
        id: get-ip
        run: |
          echo "::set-output name=instance_public_ip::$(terraform output -raw instance_public_ip)"

      - name: Save SSH private key from Terraform output
        run: |
          mkdir -p ~/.ssh
          echo "$(terraform output -raw private_key)" > ~/.ssh/web_key.pem
          chmod 400 ~/.ssh/web_key.pem  # Establece permisos 400 para la clave privada
      
      - name: Upload SSH private key as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ssh-private-key
          path: ~/.ssh/web_key.pem

      - name: Decrypt secrets.yaml using KMS
        run: |
          aws kms decrypt \
            --ciphertext-blob fileb://secrets.yaml.enc \
            --output text \
            --query Plaintext \
            --key-id ${{ secrets.KMS_KEY_ID }} \
            --region ${{ secrets.AWS_REGION }} \
            | base64 --decode > secrets.yaml

  # Phase 6: Deploy to Cloud
  deploy:
    needs: infrastructure
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download SSH private key
        uses: actions/download-artifact@v3
        with:
          name: ssh-private-key
        run: |
          mv ./web_key.pem ~/.ssh/web_key.pem
          chmod 400 ~/.ssh/web_key.pem

      - name: Deploy Application to EC2
        env:
          INSTANCE_IP: ${{ needs.infrastructure.outputs.instance_public_ip }}
        run: |
          echo "Deploying to $INSTANCE_IP"
          
          export SSH_OPTS="-o StrictHostKeyChecking=no -o ConnectTimeout=60"
          
          # Conectar al EC2 e instalar dependencias antes de crear el entorno
          ssh $SSH_OPTS -i ~/.ssh/web_key.pem ubuntu@$INSTANCE_IP <<EOF
            # Actualizar el sistema e instalar dependencias
            sudo apt update
            sudo apt install -y python3-pip python3-venv
            
            # Crear el directorio para la aplicación
            mkdir -p ~/car_crud_app && cd ~/car_crud_app
            
            # Crear entorno virtual e instalar dependencias
            python3 -m venv venv
            source venv/bin/activate
          EOF

          # Copiar los archivos específicos desde el repositorio a la instancia EC2
          scp $SSH_OPTS -i ~/.ssh/web_key.pem -r ./static ubuntu@$INSTANCE_IP:~/car_crud_app/
          scp $SSH_OPTS -i ~/.ssh/web_key.pem -r ./templates ubuntu@$INSTANCE_IP:~/car_crud_app/
          scp $SSH_OPTS -i ~/.ssh/web_key.pem ./app.py ubuntu@$INSTANCE_IP:~/car_crud_app/
          scp $SSH_OPTS -i ~/.ssh/web_key.pem ./secrets.yaml ubuntu@$INSTANCE_IP:~/car_crud_app/
          scp $SSH_OPTS -i ~/.ssh/web_key.pem ./requirements2.txt ubuntu@$INSTANCE_IP:~/car_crud_app/

          # Acceder nuevamente al EC2 para instalar dependencias de Python y ejecutar la aplicación
          ssh $SSH_OPTS -i ~/.ssh/web_key.pem ubuntu@$INSTANCE_IP <<EOF
            # Activar entorno virtual e instalar dependencias desde requirements2.txt
            cd ~/car_crud_app
            source venv/bin/activate
            pip install -r requirements2.txt

            # Iniciar la aplicación Flask
            flask run --host=0.0.0.0 &
          EOF

          echo "Deployment complete. Application should be running at http://$INSTANCE_IP:5000"

# Phase 7: Release
# release:
#   needs: test
#   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#   runs-on: ubuntu-latest

#   steps:
#     - uses: actions/checkout@v3
#       with:
#         fetch-depth: 0  # Necesario para tener acceso al historial completo de commits

#     - name: Set up Git configuration
#       run: |
#         git config --global user.name "GitHub Actions"
#         git config --global user.email "actions@github.com"
        
#     - name: Create Git Tag for Release
#       run: |
#         TAG="release-$(date +'%Y%m%d-%H%M%S')"
#         git tag $TAG
#         git push origin $TAG

